using UnityEditor;
using UnityEngine;

namespace ResourceLocalization
{
    /// <summary>
    /// Creates an instance of a script object of type LocalizationStorage
    /// </summary>
    public static class LocalizationBuilder
    {
        [InitializeOnLoadMethod]
        private static void Initialize()
        {
            CreateDataAsset<LocalizationStorage>();
            CreateComponent<AudioClip>();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fileName"><see cref=""/></param>
        /// <returns></returns>
        private static string GetPath(string fileName)
        {
            string[] res = System.IO.Directory.GetFiles(Application.dataPath, fileName, System.IO.SearchOption.AllDirectories);
            if (res.Length == 0)
            {
                Debug.LogWarning($"File named {fileName} not found.");
                return null;
            }
            string path = res[0].Replace(fileName, "").Replace("\\", "/");
            return path;
        }

        private static void CreateDataAsset<T>() where T : ScriptableObject
        {
            var objectName = typeof(T).Name + ".asset";
            if (string.IsNullOrEmpty(GetPath(objectName)))
            {
                var path = GetPath($"{nameof(LocalizationBuilder)}.cs")
                    .Replace("/Core/Editor", "/Resources")
                    .Replace(Application.dataPath, "Assets");

                if (!System.IO.Directory.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(path);
                }

                var asset = ScriptableObject.CreateInstance<T>();
                AssetDatabase.CreateAsset(asset, path + objectName);
                AssetDatabase.SaveAssets();

                Selection.activeObject = asset;
                Debug.Log($"{objectName} was created at the {path}");
            }
        }

        private static void CreateComponent<T>()
        {
            var typeName = typeof(T).Name;

            var path = GetPath($"{nameof(LocalizationBuilder)}.cs").Replace("/Core/Editor", "/Components");
            if (!System.IO.Directory.Exists($"{path}Editor/"))
            {
                System.IO.Directory.CreateDirectory($"{path}Editor/");
            }

            CreateClass(typeName + "Localization", path, GetComponentCode(typeName));
            CreateClass(typeName + "LocalizationEditor", path + "Editor/", GetComponentEditorCode(typeName));
        }

        private static void CreateClass(string className, string path, string code)
        {
            if (string.IsNullOrEmpty(GetPath($"{className}.cs")))
            {
                string comment = "// Class generated by LocalizationBuilder.cs";
                System.IO.File.WriteAllText($"{path}{className}.cs", comment + code);
                Debug.Log($"{className} was created at the {path}");
            }
        }

        private static string GetComponentCode(string typeName) {
            return
$@"
using UnityEngine;
using UnityEngine.Events;

namespace ResourceLocalization
{{
    public class {typeName}Localization : LocalizationComponent
    {{
        [System.Serializable] public class Handler : UnityEvent<{typeName}> {{ }}
        [SerializeField, HideInInspector] private Handler handler;

        public override System.Type Type => typeof({typeName});

        public override void SetLocalizationData(object data) => handler?.Invoke(({typeName})data);
    }}
}}";
        }

        private static string GetComponentEditorCode(string typeName)
        {
            return
$@"
using UnityEditor;

namespace ResourceLocalization
{{
    /// <summary>
    /// Class for displaying localization fields.
    /// </summary>
    [CustomEditor(typeof({typeName}Localization))]
    public class {typeName}LocalizationEditor : LocalizationComponentEditor {{ }}
}}";
        }


        [MenuItem("Assets/Create/LocalizationStorage", false, 1)]
        public static void CreateLocalizationDataAsset()
        {
            var selectionPath = AssetDatabase.GetAssetPath(Selection.activeObject);

            if (string.IsNullOrEmpty(selectionPath))
            {
                selectionPath = Application.dataPath;
            }

            var path = EditorUtility.SaveFilePanelInProject(
                                             "Create Localization storage",
                                             "LocalizationStorage",
                                             "asset",
                                             string.Empty,
                                             selectionPath);

        //    Debug.Log(Application.dataPath + " ---- " + path);

           if (path.Length > 0)
           {
               var storage = ScriptableObject.CreateInstance<LocalizationStorage>();
               storage.AddLanguage(new Language(Application.systemLanguage));
        
               AssetDatabase.CreateAsset(storage, path);
               AssetDatabase.SaveAssets();
        
               Selection.activeObject = storage;
           }
        }
    }
}
